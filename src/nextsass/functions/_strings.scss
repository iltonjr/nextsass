////
/// functions / strings
/// @access public
/// @group strings
/// @author Ilton Alberto Junior
////

/// Break a string into a list containing two items
/// @param {string} $string - String to be broken
/// @param {string} $separator - Separator to be used as a reference to break
/// @example str-split('lorem-ipsum')
/// @return {list} - (lorem ipsum)
@function str-split($string, $separator) {
  $split-arr: ();
  $index : str-index($string, $separator);
  @while $index != null {
    $item: str-slice($string, 1, $index - 1);
    $split-arr: append($split-arr, $item);
    $string: str-slice($string, $index + 1);
    $index : str-index($string, $separator);
  }
  $split-arr: append($split-arr, $string);

  @return $split-arr;
}

/// Search and return a specific character inside a string
/// @param {string} $value - Original string
/// @param {string} $character - Character to be found
/// @return {string} The character inside the string
@function str-get-value($value, $character) {
  $position: str-index($value, $character);
  @if (type-of($position) != number) {
    @return error
  } @else {
    $string: str-slice($value, $position);
    $value: str-slice($string, 1, 1);
  }
  @return $value;
}

/// Replace `$search` with `$replace` in `$string`
/// @author Hugo Giraudel
/// @param {string} $string - Initial string
/// @param {string} $search - Substring to replace
/// @param {string} $replace ('') - New value
/// @return {string} - Updated string
@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }

  @return $string;
}

/// Split a string into a list of strings
/// @param {string} $string - The string to be split
/// @param {string} $delimiter - The boundary string
/// @return {list} The result list
/// @author danielpchen
/// @link https://gist.github.com/danielpchen/1bef5000cfda98dbf6be
@function implode($pieces, $glue: "") {
  $result: null;
  @for $i from 1 through length($pieces) {
    $piece: nth($pieces, $i);
    @if type-of($piece) == list {
      $result: unquote("#{$result}#{$glue}#{implode($piece, $glue)}");
    } @else {
      $result: unquote("#{$result}#{$glue}#{$piece}");
    }
  }
  @if $result != null {
    $result: str-slice($result, str-length($glue) + 1, -1);
  }
  @return $result;
}

/// Split a string into a list of strings
/// @param {string} $string - The string to be split
/// @param {string} $delimiter - The boundary string
/// @return {list} The result list
/// @author danielpchen
/// @link https://gist.github.com/danielpchen/1bef5000cfda98dbf6be
@function explode($string, $delimiter) {
  $result: ();
  @if $delimiter == "" {
    @for $i from 1 through str-length($string) {
      $result: append($result, str-slice($string, $i, $i));
    }
    @return $result;
  }
  $exploding: true;
  @while $exploding {
    $d-index: str-index($string, $delimiter);
    @if $d-index {
      @if $d-index > 1 {
        $result: append($result, str-slice($string, 1, $d-index - 1));
        $string: str-slice($string, $d-index + str-length($delimiter));
      } @else if $d-index == 1 {
        $string: str-slice($string, 1, $d-index + str-length($delimiter));
      } @else {
        $result: append($result, $string);
        $exploding: false;
      }
    } @else {
      $result: append($result, $string);
      $exploding: false;
    }
  }
  @return $result;
}

